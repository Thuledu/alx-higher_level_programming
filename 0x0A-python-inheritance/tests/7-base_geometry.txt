#!/usr/bin/python3
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

#Test case 0: Testing that the integer_validator is an instance method
>>> type(BaseGeometry.__dict__['integer_validator'])
<class 'function'>

# Test case 1: Testing the area() method with the BaseGeometry class
>>> shape = BaseGeometry()
>>> shape.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

# Test case 2: Testing the integer_validator() method with valid integer values
>>> shape = BaseGeometry()
>>> shape.integer_validator("width", 5)

# Test case 3: Testing the integer_validator() method with a negative value
>>> shape = BaseGeometry()
>>> shape.integer_validator("height", -3)
Traceback (most recent call last):
...
ValueError: height must be greater than 0

# Test case 4: Testing the integer_validator() method with a non-integer value
>>> shape = BaseGeometry()
>>> shape.integer_validator("height", "invalid")
Traceback (most recent call last):
...
TypeError: height must be an integer

#Test case 5: Testing the integer_validator method with value 0
>>> bg.integer_validator("key", 0)
Traceback (most recent call last):
...
ValueError: key must be greater than 0
